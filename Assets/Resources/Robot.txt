// ROBOT

if (!global_check("moves"))
    global_set("moves", solve());

let moves = global_get("moves");

for i = 0 to string_length(moves) - 1
{
    let move = string_char(moves, i);
    if (move == "U") move_up();
        else if (move == "D") move_down();
        else if (move == "L") move_left();
        else if (move == "R") move_right();
}

string solve()
{
    let queue = queue_create();
    let visited = set_create();
    let endings = map_create();

    queue_enqueue(queue, "");
    set_add(visited, c() + "-" + r());
    map_add(endings, "", pair_create(c(), r()));

    while true
    {
        let moves = queue_dequeue(queue);
        if (is_at_exit(add_move("U", moves, queue, visited, endings))) return moves;
        if (is_at_exit(add_move("D", moves, queue, visited, endings))) return moves;
        if (is_at_exit(add_move("L", moves, queue, visited, endings))) return moves;
        if (is_at_exit(add_move("R", moves, queue, visited, endings))) return moves;
    }
}

int add_move(string move, string moves, int queue, int visited, int endings)
{
    let cp = map_get_i(endings, moves);
    let np = next_pos(cp, move);

    let np_s = pair_get_x_i(np) + "-" + pair_get_y_i(np);

    if valid(np) && !set_in(visited, np_s)
    {
        set_add(visited, np_s);
        queue_enqueue(queue, moves + move);
        map_add(endings, moves + move, np);
    }

    return np;
}

int next_pos(int cp, string move)
{
    let x = pair_get_x_i(cp);
    let y = pair_get_y_i(cp);
    if (move == "U") return pair_create(x, y + 1);
        else if (move == "D") return pair_create(x, y - 1);
        else if (move == "L") return pair_create(x - 1, y);
        else if (move == "R") return pair_create(x + 1, y);
}

bool is_at_exit(int pos)
{
    return pair_get_x_i(pos) == EXIT_C && pair_get_y_i(pos) == EXIT_R;
}

bool valid(int next_pos)
{
    let x = pair_get_x_i(next_pos);
    let y = pair_get_y_i(next_pos);

    if (x < 0 || x >= LEVEL_WIDTH || y < 0 || y >= LEVEL_HEIGHT)
        return false;

    if (get_tile(x, y) == "Wall")
        return false;

    return true;
}
