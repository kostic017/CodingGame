// ROBOT

let moves = "";

if (!global_check("moves"))
{
    let queue = queue_create();
    queue_enqueue(queue, moves);

    while to_string_l(walk(moves)) != exit()
    {
        moves = queue_dequeue(queue);
        print(moves);
        enqueue("U", moves, queue);
        enqueue("D", moves, queue);
        enqueue("L", moves, queue);
        enqueue("R", moves, queue);
    }

    global_set("moves", moves);
}
else
{
    moves = global_get("moves");
}


for i = 0 to string_length(moves) - 1
{
    let move = string_char(moves, i);
    if (move == "U") move_up();
        else if (move == "D") move_down();
        else if (move == "L") move_left();
        else if (move == "R") move_right();
}

void enqueue(string move, string moves, int queue)
{
    if last_char(moves) == opposite_move(move)
        return;

    let l = walk(moves + move);

    if !valid(l) return;

    if !makes_loop(moves + move)
        queue_enqueue(queue, moves + move);

    list_destroy(l);
}

bool makes_loop(string moves)
{
    let v = set_create();

    let x = c();
    let y = r();

    for i = 0 to string_length(moves) - 1
    {
        let move = string_char(moves, i);

        if (move == "U") y += 1;
            else if (move == "D") y -= 1;
            else if (move == "L") x -= 1;
            else if (move == "R") x += 1;

        if set_in(v, to_string_p(x, y))
            return true;

        set_add(v, to_string_p(x, y));
    }

    return false;
}

string opposite_move(string move)
{
    if (move == "U") return "D";
    if (move == "D") return "U";
    if (move == "L") return "R";
    if (move == "R") return "L";
}

int walk(string moves)
{
    let l = list_create();

    let x = c();
    let y = r();

    for i = 0 to string_length(moves) - 1
    {
        let move = string_char(moves, i);
        if (move == "U") y += 1;
            else if (move == "D") y -= 1;
            else if (move == "L") x -= 1;
            else if (move == "R") x += 1;
    }

    list_add(l, x);
    list_add(l, y);
    return l;
}

bool valid(int l)
{
    let x = list_get_i(l, 0);
    let y = list_get_i(l, 1);

    if (x < 0 || x >= LEVEL_WIDTH || y < 0 || y >= LEVEL_HEIGHT)
        return false;

    if (get_tile(x, y) == "Wall")
        return false;

    return true;
}

string to_string_p(int x, int y)
{
    return "(" + x + ", " + y + ")";
}

string to_string_l(int l)
{
    let x = list_get_i(l, 0);
    let y = list_get_i(l, 1);
    return "(" + x + ", " + y + ")";
}

string exit()
{
    return "(" + EXIT_C + ", " + EXIT_R + ")";
}

string last_char(string moves)
{
    if string_length(moves) == 0 return "";
    return string_char(moves, string_length(moves) - 1);
}